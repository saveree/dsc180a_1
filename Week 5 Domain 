{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 1: The Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import requests\n",
    "import lxml.html as lh\n",
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import re\n",
    "import json\n",
    "import os\n",
    "from skimage import io\n",
    "import matplotlib.pyplot as plt\n",
    "from skimage.color import rgb2gray\n",
    "from scipy import ndimage\n",
    "from skimage import data\n",
    "from skimage.color import rgb2hsv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Extraction "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_list_images = []\n",
    "def get_data(urls, outpath): \n",
    "    total_list = {}\n",
    "   \n",
    "    for u in urls: \n",
    "        page = requests.get(u)\n",
    "        soup = BeautifulSoup(page.content,'html.parser')\n",
    "        tb = soup.find_all('table', class_='main')\n",
    "        title = soup.find('title').get_text('title')[16:]   \n",
    "\n",
    "        list_names = []\n",
    "        images = []\n",
    "        for link in tb:\n",
    "            name = link.find('b')\n",
    "            list_names.append(name.get_text('title'))\n",
    "            images.append(link.find('img').get('src'))\n",
    "\n",
    "            #to-do next week: get dimensions \n",
    "           # dim = link.find('table').text[46:].split(',')[2]\n",
    "           # string = dim.replace(' ','').replace('\\n','').replace('\\xa0','')\n",
    "        \n",
    "        full_list_images.append(images)\n",
    "        total_list[title] = list_names,images\n",
    "        if not os.path.exists(outpath):\n",
    "            os.mkdir(outpath)\n",
    "        #pd.DataFrame(total_list).to_csv(str(outpath)+str(u)+\\'.csv')\n",
    "    return total_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "cfg = json.load(open('config_a1.json'))   \n",
    "data = get_data(**cfg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "links = []\n",
    "titles = []\n",
    "for i in data.values(): \n",
    "    links.append(i[1])\n",
    "    titles.append(i[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name of painting</th>\n",
       "      <th>img link</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Winterswijk, 1888-1896 (A1-A22)</th>\n",
       "      <td>[Woods with stream, Mountain forest with cotta...</td>\n",
       "      <td>[http://imagehandler.rkd.nl/wwwopac.ashx?comma...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amsterdam, 1893-1897 (A23-A49)</th>\n",
       "      <td>[Still life, Christ's heirs, Portrait of Dorot...</td>\n",
       "      <td>[http://imagehandler.rkd.nl/wwwopac.ashx?comma...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Winterswijk, 1897-1899 (A50-A91)</th>\n",
       "      <td>[Head of farm woman with \"polkamuts\", Head of ...</td>\n",
       "      <td>[http://imagehandler.rkd.nl/wwwopac.ashx?comma...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Amsterdam, 1897-1901 (A92-A259)</th>\n",
       "      <td>[Farm woman with cow (after Julien Dupré)]</td>\n",
       "      <td>[http://imagehandler.rkd.nl/wwwopac.ashx?comma...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brabant, 1904-1905 (A352-A379)</th>\n",
       "      <td>[Portrait of Louis van Zwanenbergh (1847-1916)...</td>\n",
       "      <td>[http://imagehandler.rkd.nl/wwwopac.ashx?comma...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                   name of painting  \\\n",
       "Winterswijk, 1888-1896 (A1-A22)   [Woods with stream, Mountain forest with cotta...   \n",
       "Amsterdam, 1893-1897 (A23-A49)    [Still life, Christ's heirs, Portrait of Dorot...   \n",
       "Winterswijk, 1897-1899 (A50-A91)  [Head of farm woman with \"polkamuts\", Head of ...   \n",
       "Amsterdam, 1897-1901 (A92-A259)          [Farm woman with cow (after Julien Dupré)]   \n",
       "Brabant, 1904-1905 (A352-A379)    [Portrait of Louis van Zwanenbergh (1847-1916)...   \n",
       "\n",
       "                                                                           img link  \n",
       "Winterswijk, 1888-1896 (A1-A22)   [http://imagehandler.rkd.nl/wwwopac.ashx?comma...  \n",
       "Amsterdam, 1893-1897 (A23-A49)    [http://imagehandler.rkd.nl/wwwopac.ashx?comma...  \n",
       "Winterswijk, 1897-1899 (A50-A91)  [http://imagehandler.rkd.nl/wwwopac.ashx?comma...  \n",
       "Amsterdam, 1897-1901 (A92-A259)   [http://imagehandler.rkd.nl/wwwopac.ashx?comma...  \n",
       "Brabant, 1904-1905 (A352-A379)    [http://imagehandler.rkd.nl/wwwopac.ashx?comma...  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame({'name of painting':titles,'img link':links}, index=[list(data.keys())])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'http://imagehandler.rkd.nl/wwwopac.ashx?command=getcontent&server=images&value=jpg\\\\099\\\\1001199099.jpg&width=150&height=150'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['img link'][0][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('pixelcount: ', 17550)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def pixel_count(img): \n",
    "    f = io.imread(img)\n",
    "    pixelcount = f.shape[0] * f.shape[1]\n",
    "    return ('pixelcount: ',pixelcount)\n",
    "   # plt.imshow(f)\n",
    "pixel_count(df['img link'][0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('mean saturation: ', 0.21377915623720356)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def mean_saturation(img): \n",
    "    f = io.imread(img)\n",
    "    hsv_img = rgb2hsv(f)\n",
    "    hue_img = hsv_img[:, :, 0]\n",
    "    saturation_img = hsv_img[:,:, 1]\n",
    "    mean_saturation = np.mean(saturation_img)\n",
    "    return ('mean saturation: ', mean_saturation)\n",
    "mean_saturation(df['img link'][0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('mean mean_brightness: ', 55.45798670465337)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def mean_brightness(img): \n",
    "    f = io.imread(img)\n",
    "    mean_brightness = np.mean(f)\n",
    "    return ('mean mean_brightness: ', mean_brightness)\n",
    "mean_brightness(df['img link'][0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def grayscale_(img):   \n",
    "    f = io.imread(img)\n",
    "    grayscale = rgb2gray(f)\n",
    "    plt.imshow(grayscale, cmap='gray')\n",
    "    gray_edges = ndimage.sobel(grayscale)\n",
    "    plt.imshow(gray_edges, cmap='gray')\n",
    "grayscale_(df['img link'][0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "150"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def edge_score(img):  \n",
    "    f = io.imread(img)\n",
    "    #for edge score \n",
    "    edges = ndimage.sobel(f)\n",
    "    return len(edges)\n",
    "edge_score(df['img link'][0][0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "#todo: \n",
    "#add multiindex columns/links etc\n",
    "#get more metadata (year) \n",
    "#write 2 reports\n",
    "#check for style"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_images = [j for i in full_list_images for j in i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_edge_scores = []\n",
    "for i in all_images: \n",
    "    all_edge_scores.append(edge_score(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "e = pd.DataFrame({'edge scores':all_edge_scores})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f0f837e5470>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "e.hist('edge scores')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_mean_brightness = []\n",
    "for i in all_images: \n",
    "    all_mean_brightness.append(mean_brightness(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "mb = []\n",
    "for (i, j) in all_mean_brightness:\n",
    "    mb.append(j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "b = pd.DataFrame({'brightness':mb})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>brightness</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>55.457987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>154.470179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>105.112586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>119.545792</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>108.780656</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   brightness\n",
       "0   55.457987\n",
       "1  154.470179\n",
       "2  105.112586\n",
       "3  119.545792\n",
       "4  108.780656"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f0f86dd2198>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "b.hist('brightness')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_mean_saturation = []\n",
    "for i in all_images: \n",
    "    all_mean_saturation.append(mean_saturation(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "am = []\n",
    "for (i, j) in all_mean_saturation:\n",
    "    am.append(j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean saturation</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.213779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.012214</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.425766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.466691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.192913</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean saturation\n",
       "0         0.213779\n",
       "1         0.012214\n",
       "2         0.425766\n",
       "3         0.466691\n",
       "4         0.192913"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "amdf = pd.DataFrame({'mean saturation':am})\n",
    "amdf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f0f86d567b8>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "amdf.hist('mean saturation')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "all_pixel_counts = []\n",
    "for i in all_images: \n",
    "    all_pixel_counts.append(pixel_count(i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "ap = []\n",
    "for (i, j) in all_pixel_counts:\n",
    "    ap.append(j)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pixel counts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>17550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>18300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>18300</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   pixel counts\n",
       "0         17550\n",
       "1         16800\n",
       "2         17850\n",
       "3         18300\n",
       "4         18300"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "apdf = pd.DataFrame({'pixel counts':ap})\n",
    "apdf.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f0f839ab9e8>]],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "apdf.hist('pixel counts')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Download images for paintings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#script to download paintings locally "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "full_list_images #contains all the images on all the sites\n",
    "\n",
    "def download_images(full_list_images): \n",
    "    links = soup.find('figure').find_all('img', src=True)\n",
    "    for link in links:\n",
    "        timestamp = time.asctime() \n",
    "        txt = open('%s.jpg' % timestamp, \"wb\")\n",
    "        link = link[\"src\"].split(\"src=\")[-1]\n",
    "        download_img = urllib2.urlopen(link)\n",
    "        txt.write(download_img.read())\n",
    "\n",
    "        txt.close()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
